{"version":3,"sources":["styles/GlobalStyle.js","components/ToggleButton.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","ToggleButton","color","theme","onClickHandler","ButtonContainer","styled","div","btnBg","Button","btn","props","onClick","light","bg","mainText","secondaryText","dark","App","useState","curTheme","setCurTheme","themeData","setThemeData","Hero","HeadingText","h1","RightTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yeAEO,IAAMA,EAAcC,YAAH,K,sjBCCxB,IAiCeC,EAjCM,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,eAC9BC,EAAkBC,IAAOC,IAAV,IAKLL,EAAMM,OAKhBC,EAASH,IAAOC,IAAV,IAKIL,EAAMQ,KAMhB,SAACC,GAAD,MAA4B,UAAhBA,EAAMR,MAAoB,aAAe,iBAI3D,OACE,kBAACE,EAAD,CAAiBO,QAASR,GACxB,kBAACK,EAAD,CAAQN,MAAOA,MC/BRA,EAAQ,CACnBU,MAAO,CACLC,GAAI,UACJC,SAAU,UACVC,cAAe,UACfR,MAAO,UACPE,IAAK,QAEPO,KAAM,CACJH,GAAI,UACJC,SAAU,UACVC,cAAe,UACfR,MAAO,UACPE,IAAK,Y,+fC4CMQ,MAnDf,WAAgB,IAAD,EACmBC,mBAAS,SAD5B,mBACNC,EADM,KACIC,EADJ,OAEqBF,mBAAShB,EAAMU,OAFpC,mBAENS,EAFM,KAEKC,EAFL,KAGPC,EAAOlB,IAAOC,IAAV,IAGMe,EAAUR,GACfQ,EAAUP,UAMfU,EAAcnB,IAAOoB,GAAV,KAKXC,EAAWrB,IAAOC,IAAV,KAgBd,OACE,kBAAC,IAAD,CAAeJ,MAAOA,GACpB,kBAACJ,EAAD,MACA,kBAACyB,EAAD,KACE,kBAACC,EAAD,uBACA,kBAACE,EAAD,KACE,kBAAC,EAAD,CACExB,MAAOiB,EACPlB,MAAOoB,EACPlB,eAnBiB,WACR,UAAbgB,GACFC,EAAY,QACZE,EAAapB,EAAMc,OACG,SAAbG,IACTC,EAAY,SACZE,EAAapB,EAAMU,eCxBLe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9590cce2.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\nbody{\n  width: 100vw;\n  font-size: 14px;\n  line-height: 1.2;\n  font-family: sans-serif;\n  font-weight:300;\n}\n*{\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ToggleButton = ({ color, theme, onClickHandler }) => {\n  const ButtonContainer = styled.div`\n    display: block;\n    width: 80px;\n    height: 40px;\n    border-radius: 20px;\n    background: ${color.btnBg};\n    position: relative;\n    cursor: pointer;\n  `;\n\n  const Button = styled.div`\n    position: absolute;\n    content: \" \";\n    height: 35px;\n    width: 35px;\n    background: ${color.btn};\n    border-radius: 50%;\n    z-index: 1;\n    box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1);\n    transition: all 0.5s;\n    transform: translate(\n      ${(props) => (props.theme === \"light\" ? \"5px, 2.5px\" : \"40px, 2.5px\")}\n    );\n  `;\n\n  return (\n    <ButtonContainer onClick={onClickHandler}>\n      <Button theme={theme} />\n    </ButtonContainer>\n  );\n};\n\nexport default ToggleButton;\n","export const theme = {\n  light: {\n    bg: \"#F4F4F4\",\n    mainText: \"#272727\",\n    secondaryText: \"#D7D7D7\",\n    btnBg: \"#EAEAEA\",\n    btn: \"#fff\",\n  },\n  dark: {\n    bg: \"#151F25\",\n    mainText: \"#C0C8CE\",\n    secondaryText: \"#555C64\",\n    btnBg: \"#182C37\",\n    btn: \"#2364AF\",\n  },\n};\n","import React, { useState } from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { GlobalStyle } from \"./styles/GlobalStyle\";\nimport ToggleButton from \"./components/ToggleButton\";\nimport { theme } from \"./theme\";\n\nfunction App() {\n  const [curTheme, setCurTheme] = useState(\"light\");\n  const [themeData, setThemeData] = useState(theme.light);\n  const Hero = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background: ${themeData.bg};\n    color: ${themeData.mainText};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n  `;\n  const HeadingText = styled.h1`\n    font-size: 3rem;\n    text-shadow: 3px 3px 3px gray;\n  `;\n\n  const RightTop = styled.div`\n    position: absolute;\n    right: 5%;\n    top: 5%;\n  `;\n\n  const themeSwitchHandler = () => {\n    if (curTheme === \"light\") {\n      setCurTheme(\"dark\");\n      setThemeData(theme.dark);\n    } else if (curTheme === \"dark\") {\n      setCurTheme(\"light\");\n      setThemeData(theme.light);\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Hero>\n        <HeadingText> Hello World! </HeadingText>\n        <RightTop>\n          <ToggleButton\n            theme={curTheme}\n            color={themeData}\n            onClickHandler={themeSwitchHandler}\n          />\n        </RightTop>\n      </Hero>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}